"""
TG-–±–æ—Ç: –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã
–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π ¬´—Ä–∞–Ω–¥–æ–º–Ω—ã–π¬ª —Ç–æ–ø –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç apscheduler
"""

import os
import random
import time
import asyncio
import logging
import datetime as dt

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv('WELCOME_BOT_TOKEN')
ADMIN_ID  = int(os.getenv('MY_ID'))

MAIN_CHANNEL_LINK     = "https://t.me/+NpcxCSbz0VxjMjMy"
PAYMENTS_CHANNEL_LINK = "https://t.me/+ojyK0KkEw-E4NDRi"
GROUP_CHAT_LINK       = "https://t.me/YourGroupChat"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
CHILL_MANOFF_LINK     = "https://t.me/Chill_manoff"
WHAT_WE_DO_LINK       = "https://telegra.ph/Nashe-napravlenie-05-22"
ELECTRUM_SETUP_LINK   = "https://telegra.ph/Ustanovka-i-nastrojka-Electrum-05-23"
CANCEL_TX_LINK        = "https://telegra.ph/OTMENA-BTC-TRANZAKCII-05-31"
MANAGER_GUIDE_LINK    = "https://telegra.ph/INSTRUKCIYA-DLYA-MENEDZhERA--PERVICHNAYA-OBRABOTKA-ZAYAVKI-05-24"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot      = Bot(BOT_TOKEN)
storage  = MemoryStorage()
dp       = Dispatcher(storage=storage)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WEEKLY TOP STORAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
weekly_top = {"teams": [], "workers": []}

async def assign_team_leader(chat_id: int):
    # –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 10 –¥–æ 20 –º–∏–Ω—É—Ç
    delay = random.randint(10 * 60, 20 * 60)
    await asyncio.sleep(delay)
    # –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–º–ª–∏–¥–µ—Ä–∞
    leader = random.choice(TEAM_LEADERS)
    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.send_message(
        chat_id,
        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É! –í–∞—à —Ç–∏–º–ª–∏–¥ - @{leader}!"
    )


def random_top_teams(n):
    """Generate a list of n random teams."""
    teams = []
    for _ in range(n):
        name = random.choice([
            "Fenix", "Professor", "Djenga", "–î–µ–≤—è—Ç—ã–π", "Akatsuki", "Medici", "wa3rix"
        ])
        amount  = random.randint(1000, 10000)
        profits = random.randint(1, 20)
        teams.append({"name": name, "amount": amount, "profits": profits})
    teams.sort(key=lambda x: x['amount'], reverse=True)
    return teams


def random_top_workers(n):
    """Generate a list of n random workers."""
    workers = []
    for _ in range(n):
        name = random.choice([
            "–ù–∞—Ç–∞—à–∫–∞", "angerfist", "–•–æ—Ä–µ–∫", "–®–∞—Ä–∫", "CARAVEL", "–•–æ–ª–æ–¥—Ä—ã–≥–∞", "–ù–µ —Ç–æ—Ä—Ç"
        ])
        amount  = random.randint(500, 5000)
        profits = random.randint(1, 10)
        workers.append({"name": name, "amount": amount, "profits": profits})
    workers.sort(key=lambda x: x['amount'], reverse=True)
    return workers


def update_weekly_lists():
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤ weekly_top ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é."""
    weekly_top["teams"]   = random_top_teams(7)
    weekly_top["workers"] = random_top_workers(10)
    logger.info(
        "Weekly lists updated: %d teams, %d workers", 
        len(weekly_top["teams"]), len(weekly_top["workers"]) 
    )


async def weekly_updater():
    """–¶–∏–∫–ª: –∫–∞–∂–¥—ã–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø-–ª–∏—Å—Ç—ã."""
    while True:
        now = dt.datetime.now()
        days_ahead = (0 - now.weekday() + 7) % 7
        if days_ahead == 0 and now.time() >= dt.time(10, 0):
            days_ahead = 7
        next_run = dt.datetime.combine(
            now.date() + dt.timedelta(days=days_ahead),
            dt.time(10, 0)
        )
        delay = (next_run - now).total_seconds()
        logger.info("Next weekly update in %.0f seconds", delay)
        await asyncio.sleep(delay)
        update_weekly_lists()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ USER STORAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            'wallets': [],
            'last_generation': None,
            'total_profit': 0,
            'weekly_profit': 0,
            'referrals': 0,
            'application_done': False
        }
    return user_data[user_id]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ RANKS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
RANKS = {
    "–§—Ä–µ—à–º–µ–Ω": 0,
    "–ì—Ä–∞–π–Ω–¥–µ—Ä": 2000,
    "–í–µ—Ç–µ—Ä–∞–Ω": 5000,
    "–≠–ª–∏—Ç–∞": 10000,
    "–õ–µ–≥–µ–Ω–¥–∞": 20000
}

def get_next_rank(total):
    current = max((r for r in RANKS if total >= RANKS[r]), key=lambda r: RANKS[r])
    keys = list(RANKS)
    idx  = keys.index(current)
    if idx < len(keys) - 1:
        nxt = keys[idx + 1]
        need = RANKS[nxt] - total
    else:
        nxt, need = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π", 0
    return current, nxt, need

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM APPLICATION ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Application(StatesGroup):
    waiting_for_name       = State()
    waiting_for_experience = State()
    waiting_for_hours      = State()
    waiting_for_wallet     = State()


def require_application(handler):
    async def wrapper(message: types.Message, *args, **kwargs):
        if not get_user_data(message.from_user.id)['application_done']:
            await message.answer(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª."
            )
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN MENU ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_main_menu_kb():
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="–ú–∞–Ω—É–∞–ª—ã"))
    kb.row(types.KeyboardButton(text="üß¨ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏"))
    kb.row(
        types.KeyboardButton(text="üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton(text="üîù –¢–æ–ø –Ω–µ–¥–µ–ª–∏")
    )
    kb.row(
        types.KeyboardButton(text="üîù –ö–æ–º–∞–Ω–¥—ã"),
        types.KeyboardButton(text="üíå –ö–∞–Ω–∞–ª")
    )
    kb.row(
        types.KeyboardButton(text="ü§ù –ò–Ω–≤–∞–π—Ç"),
        types.KeyboardButton(text="üè¶ –í—ã–ø–ª–∞—Ç—ã")
    )
    return kb.as_markup(resize_keyboard=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    btn = InlineKeyboardBuilder().add(
        types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_from_start"
        )
    )
    welcome_text = (
        "üñº <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!</b>\n\n"
        "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ –∏ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–∂–¥–µ, —á–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.\n\n"
        "‚õî –†–∞–∑–º–µ—â–µ–Ω–∏–µ 18+ –º–µ–¥–∏–∞ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ‚Äì –ë–ê–ù\n"
        "‚õî –†–µ–∫–ª–∞–º–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤/—É—Å–ª—É–≥ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚Äì –ë–ê–ù\n"
        "‚õî –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äì –º—É—Ç –Ω–∞ —Å—É—Ç–∫–∏\n"
        "‚õî –°—Ä–∞—á–∏ –Ω–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã ‚Äì –ë–ê–ù –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
        "‚õî –°–∞–±–æ—Ç–∏—Ä–æ–≤–∞—Ç—å/–ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å/–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äì –ë–ê–ù\n"
        "‚õî –ü—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ ‚Äì –ë–ê–ù\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –∑–∞—è–≤–∫—É, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚úçÔ∏è"
    )
    await message.answer(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=btn.as_markup()
    )

@dp.callback_query(lambda c: c.data == "apply_from_start")
async def apply_from_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Application.waiting_for_name)
    await callback.message.answer("1. –£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç:")
    await callback.answer()

@dp.message(Application.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name_age=message.text)
    await state.set_state(Application.waiting_for_experience)
    await message.answer("2. –ë—ã–ª –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ –∑–≤–æ–Ω–∫–∞—Ö/—á–∞—Ç–∞—Ö? (–ï—Å–ª–∏ –±—ã–ª, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ)")

@dp.message(Application.waiting_for_experience)
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await state.set_state(Application.waiting_for_hours)
    await message.answer("3. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?")

@dp.message(Application.waiting_for_hours)
async def process_hours(message: types.Message, state: FSMContext):
    await state.update_data(hours=message.text)
    await state.set_state(Application.waiting_for_wallet)
    await message.answer("4. –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å BTC –¥–ª—è —Ä–∞–±–æ—Ç—ã:")

@dp.message(Application.waiting_for_wallet)
async def process_wallet(message: types.Message, state: FSMContext):
    await state.update_data(btc_wallet=message.text)
    data = await state.get_data()
    application_text = (
        "üìÑ <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n"
        f"üë§ <b>–ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç:</b> {data['name_age']}\n"
        f"üíº <b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {data['experience']}\n"
        f"‚è± <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {data['hours']}\n"
        f"üí∞ <b>BTC –∫–æ—à–µ–ª—ë–∫:</b> {data['btc_wallet']}\n"
        f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.id}"
    )
    try:
        await bot.send_message(ADMIN_ID, application_text, parse_mode=ParseMode.HTML)
        logger.info("Application sent to admin from user %s", message.from_user.id)
    except Exception as e:
        logger.error("Error sending application: %s", e)

    # Confirmation for user
    await message.answer(
        "‚úÖ <b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.</b>\n",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu_kb()
    )
    
    # Channel links
    links = InlineKeyboardBuilder()
    links.row(
        types.InlineKeyboardButton(text="üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", url=MAIN_CHANNEL_LINK),
        types.InlineKeyboardButton(text="üí∏ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç", url=PAYMENTS_CHANNEL_LINK)
    )
    await message.answer(
        "–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤—ã–ø–ª–∞—Ç—ã, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        reply_markup=links.as_markup()
    )
    await state.clear()

    # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    asyncio.create_task(assign_team_leader(message.chat.id))

# Menu option handlers
@dp.message(lambda message: message.text == "–ú–∞–Ω—É–∞–ª—ã")
async def show_manuals(message: types.Message):
    manuals_text = (
        "üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞–Ω—É–∞–ª—ã –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–∞–Ω—É–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )

    # Create inline keyboard with manual links
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–ß–µ–º –∑–∞–Ω–∏–º–∞–µ–º—Å—è",
            url=WHAT_WE_DO_LINK
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Electrum",
            url=ELECTRUM_SETUP_LINK
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∞ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            url=CANCEL_TX_LINK
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            url=MANAGER_GUIDE_LINK
        )
    )

    await message.answer(
        manuals_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TL")
async def show_tl_stats(message: types.Message):
    stats_text = (
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TL</b>\n"
        "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ç–∏–º–ª–∏–¥–µ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ç–∏–º–ª–∏–¥–µ—Ä–æ–º, –ø—Ä–æ—è–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Chill_manoff"
    )
    await message.answer(stats_text, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ–º—Å—è")
async def show_what_we_do(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏",
        url=WHAT_WE_DO_LINK
    ))
    work_text = (
        "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Electrum –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RBF\n"
        "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    await message.answer(
        work_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(lambda m: m.text == "üß¨ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏")
@require_application
async def show_my_wallets(message: types.Message):
    user = get_user_data(message.from_user.id)
    if not user["wallets"]:
        kb = InlineKeyboardBuilder().add(
            types.InlineKeyboardButton(text="üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏", callback_data="generate_wallets")
        )
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.", reply_markup=kb.as_markup())
        return

    text = "üîë <b>–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>\n\n"
    for i, w in enumerate(user["wallets"], start=1):
        text += (
            f"<b>–°–≤—è–∑–∫–∞ #{i}</b> (—Å–æ–∑–¥–∞–Ω–∞ {w['created']})\n"
            f"‚Ä¢ ETH: <code>{w['eth']}</code>\n"
            f"‚Ä¢ TRX: <code>{w['trx']}</code>\n\n"
        )
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.callback_query(lambda c: c.data == "generate_wallets")
@require_application
async def generate_keys_callback(callback: types.CallbackQuery):
    user = get_user_data(callback.from_user.id)
    now = time.time()
    if user["last_generation"] and now - user["last_generation"] < 24*3600:
        rem = 24*3600 - (now - user["last_generation"])
        h, m = divmod(rem, 3600)
        m //= 60
        await callback.message.answer(f"‚ö†Ô∏è –í—ã —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–ª—é—á–∏ —Å–µ–≥–æ–¥–Ω—è.\n–°–ª–µ–¥—É—é—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {int(h)}—á {int(m)}–º.")
        await callback.answer()
        return

    user["wallets"]        = generate_wallets()
    user["last_generation"] = now

    text = "üéâ <b>–ù–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
    for i, w in enumerate(user["wallets"], start=1):
        text += (
            f"<b>–°–≤—è–∑–∫–∞ #{i}</b>\n"
            f"‚Ä¢ ERC20: <code>{w['eth']}</code>\n"
            f"‚Ä¢ TRC20: <code>{w['trx']}</code>\n\n"
        )
    text += "‚ÄºÔ∏è <b>–í–ê–ñ–ù–û:</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ."
    await callback.message.answer(text, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.message(lambda message: message.text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_my_stats(message: types.Message):
    user = get_user_data(message.from_user.id)
    current_rank, next_rank, needed = get_next_rank(user['total_profit'])

    stats_text = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üíµ –ü—Ä–æ—Ñ–∏—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{user['total_profit']}$</b>\n"
        f"üìÖ –ü—Ä–æ—Ñ–∏—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{user['weekly_profit']}$</b>\n"
        f"üèÖ –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: <b>{current_rank}</b>\n\n"
        f"üìà –î–æ –∑–≤–∞–Ω–∏—è <b>{next_rank}</b> –æ—Å—Ç–∞–ª–æ—Å—å: <b>{needed}$</b>\n"
        f"üí∏ –ù–µ–¥–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: <b>{user['weekly_profit'] * 0.35}$</b>"
    )

    await message.answer(stats_text, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "üîù –ö–æ–º–∞–Ω–¥—ã")
async def list_teams(message: types.Message):
    teams = [
        {"name": "Fenix", "amount": 5383, "profits": 11},
        {"name": "Professor", "amount": 5287, "profits": 8},
        {"name": "Djenga", "amount": 4460, "profits": 9},
        {"name": "–î–µ–≤—è—Ç—ã–π", "amount": 3940, "profits": 9},
        {"name": "Akatsuki", "amount": 3389, "profits": 7},
        {"name": "Medici", "amount": 3347, "profits": 8},
        {"name": "wa3rix", "amount": 2606, "profits": 6}
    ]
    
    text = "üèÜ <b>–¢–æ–ø –∫–æ–º–∞–Ω–¥ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    for i, team in enumerate(teams, start=1):
        text += f"{i}. <b>{team['name']}</b> - {team['amount']}$ | –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {team['profits']}\n"
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "üîù –¢–æ–ø –Ω–µ–¥–µ–ª–∏")
async def top_week(message: types.Message):
    workers = [
        {"name": "–ù–∞—Ç–∞—à–∫–∞", "amount": 1700, "profits": 3},
        {"name": "angerfist", "amount": 1601, "profits": 2},
        {"name": "–•–æ—Ä–µ–∫", "amount": 1494, "profits": 3},
        {"name": "–®–∞—Ä–∫", "amount": 1493, "profits": 2},
        {"name": "CARAVEL", "amount": 1285, "profits": 2}
    ]
    
    text = "üèÜ <b>–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏</b>\n\n"
    for i, w in enumerate(workers, start=1):
        text += f"{i}. <b>{w['name']}</b> - {w['amount']}$ | –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {w['profits']}\n"
    text += "\nüí∏ <b>–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç:</b> " + PAYMENTS_CHANNEL_LINK
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "üíå –ö–∞–Ω–∞–ª")
async def show_channel_info(message: types.Message):
    # Create inline buttons for channels
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª",
            url=MAIN_CHANNEL_LINK
        ),
        types.InlineKeyboardButton(
            text="üí∏ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç",
            url=PAYMENTS_CHANNEL_LINK
        )
    )

    channel_text = (
        "üì¢ <b>–ù–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</b>\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "–ù–∞ —Å–ª—É—á–∞–π —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –±—É–¥–µ—Ç –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç."
    )

    await message.answer(
        channel_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "ü§ù –ò–Ω–≤–∞–π—Ç")
async def generate_invite(message: types.Message):
    bot_username = (await bot.get_me()).username
    ref_code = message.from_user.username or str(message.from_user.id)
    invite_link = f"https://t.me/{bot_username}?start={ref_code}"

    invite_text = (
        "ü§ù <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</b>\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{invite_link}</code>\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +5% –∫ –Ω–µ–¥–µ–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç–µ!"
    )

    # Create inline button for quick sharing
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
        url=f"tg://msg_url?url={invite_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–Ω–∞—à–µ–π%20–∫–æ–º–∞–Ω–¥–µ!"
    ))

    await message.answer(
        invite_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "üè¶ –í—ã–ø–ª–∞—Ç—ã")
async def show_payments_info(message: types.Message):
    # Create inline button for payments channel
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üí∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç",
        url=PAYMENTS_CHANNEL_LINK
    ))

    payments_text = (
        "üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö</b>\n\n"
        "–í—Å–µ –ø—Ä–æ—Ñ–∏—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç.\n\n"
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
        "‚Ä¢ –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤: /topweek\n"
        "‚Ä¢ –¢–æ–ø –∫–æ–º–∞–Ω–¥: /topweekteam\n\n"
        "–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –æ—Ç —Ç–∏–º–ª–∏–¥–∞."
    )

    await message.answer(
        payments_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

# Main function
async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    # Generate initial top lists
    weekly_top["teams"] = [
        {"name": "Fenix", "amount": 5383, "profits": 11},
        {"name": "Professor", "amount": 5287, "profits": 8},
        {"name": "Djenga", "amount": 4460, "profits": 9},
        {"name": "–î–µ–≤—è—Ç—ã–π", "amount": 3940, "profits": 9},
        {"name": "Akatsuki", "amount": 3389, "profits": 7},
        {"name": "Medici", "amount": 3347, "profits": 8},
        {"name": "wa3rix", "amount": 2606, "profits": 6}
    ]
    
    weekly_top["workers"] = [
        {"name": "–ù–∞—Ç–∞—à–∫–∞", "amount": 1700, "profits": 3},
        {"name": "angerfist", "amount": 1601, "profits": 2},
        {"name": "–•–æ—Ä–µ–∫", "amount": 1494, "profits": 3},
        {"name": "–®–∞—Ä–∫", "amount": 1493, "profits": 2},
        {"name": "CARAVEL", "amount": 1285, "profits": 2},
        {"name": "–•–æ–ª–æ–¥—Ä—ã–≥–∞", "amount": 1230, "profits": 2},
        {"name": "–ù–µ —Ç–æ—Ä—Ç", "amount": 1166, "profits": 3},
        {"name": "ANTAURI", "amount": 1144, "profits": 2},
        {"name": "–¶–≤–µ—Ç–æ—á–µ–∫", "amount": 1104, "profits": 3},
        {"name": "–û–ú–ù–ò", "amount": 1069, "profits": 2}
    ]
    
    asyncio.run(main())
