"""
WelcomeBot.py  ‚Äî  –ø–æ–ª–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
Dependencies:
    pip install aiogram~=3.4 apscheduler python-dotenv
"""

import asyncio
import datetime as dt
import logging
import os
import random
import time
from typing import Dict, List

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV / CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

BOT_TOKEN = os.getenv("WELCOME_BOT_TOKEN", "")
ADMIN_ID  = int(os.getenv("MY_ID", "0"))

if not BOT_TOKEN or not ADMIN_ID:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ WELCOME_BOT_TOKEN –∏/–∏–ª–∏ MY_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")

MAIN_CHANNEL_LINK     = "https://t.me/+NpcxCSbz0VxjMjMy"
PAYMENTS_CHANNEL_LINK = "https://t.me/+ojyK0KkEw-E4NDRi"
CHILL_MANOFF_LINK     = "https://t.me/Chill_manoff"
WHAT_WE_DO_LINK       = "https://telegra.ph/Nashe-napravlenie-05-22"
ELECTRUM_SETUP_LINK   = "https://telegra.ph/Ustanovka-i-nastrojka-Electrum-05-23"
CANCEL_TX_LINK        = "https://telegra.ph/OTMENA-BTC-TRANZAKCII-05-31"
MANAGER_GUIDE_LINK    = "https://telegra.ph/INSTRUKCIYA-DLYA-MENEDZHERA--PERVICHNAYA-OBRABOTKA-ZAYAVKI-05-24"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGGING ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(name)s | %(levelname)s | %(message)s",
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ BOT & SCHEDULER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot      = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
storage  = MemoryStorage()
dp       = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler(timezone="UTC")  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DATA STORAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
user_data: Dict[int, Dict] = {}
weekly_top = {"teams": [], "workers": []}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_user(uid: int) -> Dict:
    if uid not in user_data:
        user_data[uid] = {
            "wallets": [],
            "last_generation": None,
            "total_profit": 0,
            "weekly_profit": 0,
            "referrals": 0,
        }
    return user_data[uid]

def generate_wallets() -> List[Dict]:
    out = []
    for _ in range(3):
        out.append(
            {
                "eth": "0x" + "".join(random.choices("0123456789abcdef", k=40)),
                "trx": "T"  + "".join(random.choices("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", k=33)),
                "created": dt.datetime.now().strftime("%d.%m.%Y"),
            }
        )
    return out

def random_top_teams(n: int) -> List[Dict]:
    names = ["Fenix", "Professor", "Djenga", "–î–µ–≤—è—Ç—ã–π", "Akatsuki", "Medici", "wa3rix"]
    teams = [
        {
            "name": random.choice(names),
            "amount": random.randint(1_000, 10_000),
            "profits": random.randint(1, 20),
        }
        for _ in range(n)
    ]
    teams.sort(key=lambda x: x["amount"], reverse=True)
    return teams

def random_top_workers(n: int) -> List[Dict]:
    names = ["–ù–∞—Ç–∞—à–∫–∞", "angerfist", "–•–æ—Ä–µ–∫", "–®–∞—Ä–∫", "CARAVEL", "–•–æ–ª–æ–¥—Ä—ã–≥–∞", "–ù–µ —Ç–æ—Ä—Ç"]
    workers = [
        {
            "name": random.choice(names),
            "amount": random.randint(500, 5_000),
            "profits": random.randint(1, 10),
        }
        for _ in range(n)
    ]
    workers.sort(key=lambda x: x["amount"], reverse=True)
    return workers

def update_weekly_lists() -> None:
    weekly_top["teams"]   = random_top_teams(7)
    weekly_top["workers"] = random_top_workers(10)
    logger.info("Weekly TOP lists regenerated")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ RANKS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
RANKS = {
    "–§—Ä–µ—à–º–µ–Ω": 0,
    "–ì—Ä–∞–π–Ω–¥–µ—Ä": 2_000,
    "–í–µ—Ç–µ—Ä–∞–Ω": 5_000,
    "–≠–ª–∏—Ç–∞": 10_000,
    "–õ–µ–≥–µ–Ω–¥–∞": 20_000,
}

def next_rank(amount: int) -> tuple[str, str, int]:
    current = "–§—Ä–µ—à–º–µ–Ω"
    for rank, border in RANKS.items():
        if amount >= border:
            current = rank

    keys = list(RANKS)
    idx  = keys.index(current)
    if idx < len(keys) - 1:
        nxt = keys[idx + 1]
        need = RANKS[nxt] - amount
    else:
        nxt, need = "–ú–∞–∫—Å–∏–º—É–º", 0
    return current, nxt, need

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM STATES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Application(StatesGroup):
    waiting_for_name       = State()
    waiting_for_experience = State()
    waiting_for_hours      = State()
    waiting_for_wallet     = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ KEYBOARDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main_menu() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="–ú–∞–Ω—É–∞–ª—ã"))
    kb.row(types.KeyboardButton(text="üß¨ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏"))
    kb.row(
        types.KeyboardButton(text="üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton(text="üîù –¢–æ–ø –Ω–µ–¥–µ–ª–∏"),
    )
    kb.row(
        types.KeyboardButton(text="üîù –ö–æ–º–∞–Ω–¥—ã"),
        types.KeyboardButton(text="üíå –ö–∞–Ω–∞–ª"),
    )
    kb.row(
        types.KeyboardButton(text="ü§ù –ò–Ω–≤–∞–π—Ç"),
        types.KeyboardButton(text="üè¶ –í—ã–ø–ª–∞—Ç—ã"),
    )
    return kb.as_markup(resize_keyboard=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ AUTO-CONFIRM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def auto_confirm(user_id: int) -> None:
    leaders = ["Fenix", "Professor", "Djenga", "–î–µ–≤—è—Ç—ã–π", "Akatsuki", "Medici", "wa3rix"]
    chosen  = random.choice(leaders)

    text = (
        f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
        f"–í–∞—à —Ç–∏–º–ª–∏–¥ ‚Äì <b>{chosen}</b>.\n\n"
        f"üì¢ <a href='{MAIN_CHANNEL_LINK}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a>\n"
        f"üí∏ <a href='{PAYMENTS_CHANNEL_LINK}'>–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç</a>\n"
        f"üë• <a href='{CHILL_MANOFF_LINK}'>–ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã</a>"
    )
    await bot.send_message(user_id, text, disable_web_page_preview=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))
    await msg.answer(
        "üñº <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!</b>\n\n"
        "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ –∏ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–∂–¥–µ, —á–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
        "‚õî –†–∞–∑–º–µ—â–µ–Ω–∏–µ 18+ –º–µ–¥–∏–∞ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ‚Äì –ë–ê–ù.",
        "‚õî –†–µ–∫–ª–∞–º–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤/—É—Å–ª—É–≥ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚Äì –ë–ê–ù.",
        "‚õî –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äì –º—É—Ç –Ω–∞ —Å—É—Ç–∫–∏.",
        "‚õî –°—Ä–∞—á–∏ –Ω–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã ‚Äì –ë–ê–ù –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ.",
        "‚õî –°–∞–±–æ—Ç–∏—Ä–æ–≤–∞—Ç—å/–ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å/–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äì –ë–ê–ù.",
        "‚õî –ü—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ ‚Äì –ë–ê–ù.",
        ""
        "–ù–∞–∂–∏–º–∞—è '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. ‚úçÔ∏è"
        reply_markup=kb.as_markup(),
    )

# ‚îÄ‚îÄ –ó–∞—è–≤–∫–∞ —à–∞–≥–∏
@dp.callback_query(lambda c: c.data == "apply")
async def apply_step_1(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(Application.waiting_for_name)
    await cb.message.answer("1. –£–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç:")
    await cb.answer()

@dp.message(Application.waiting_for_name)
async def apply_step_2(msg: types.Message, state: FSMContext):
    await state.update_data(name_age=msg.text)
    await state.set_state(Application.waiting_for_experience)
    await msg.answer("2. –ë—ã–ª –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ –∑–≤–æ–Ω–∫–∞—Ö/—á–∞—Ç–∞—Ö?")

@dp.message(Application.waiting_for_experience)
async def apply_step_3(msg: types.Message, state: FSMContext):
    await state.update_data(experience=msg.text)
    await state.set_state(Application.waiting_for_hours)
    await msg.answer("3. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?")

@dp.message(Application.waiting_for_hours)
async def apply_step_4(msg: types.Message, state: FSMContext):
    await state.update_data(hours=msg.text)
    await state.set_state(Application.waiting_for_wallet)
    await msg.answer("4. –ê–¥—Ä–µ—Å BTC-–∫–æ—à–µ–ª—å–∫–∞:")

@dp.message(Application.waiting_for_wallet)
async def apply_finish(msg: types.Message, state: FSMContext):
    await state.update_data(btc_wallet=msg.text)
    data = await state.get_data()

    # –∞–¥–º–∏–Ω—É
    txt = (
        "üìÑ <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n"
        f"üë§ <b>–ò–º—è/–≤–æ–∑—Ä–∞—Å—Ç:</b> {data['name_age']}\n"
        f"üíº <b>–û–ø—ã—Ç:</b> {data['experience']}\n"
        f"‚è± <b>–ß–∞—Å—ã:</b> {data['hours']}\n"
        f"üí∞ <b>BTC:</b> {data['btc_wallet']}\n"
        f"üÜî <b>ID:</b> {msg.from_user.id}"
    )
    await bot.send_message(ADMIN_ID, txt)

    # –∞–≤—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    delay = random.randint(10, 20)
    scheduler.add_job(
        auto_confirm,
        "date",
        run_date=dt.datetime.utcnow() + dt.timedelta(minutes=delay),
        kwargs={"user_id": msg.from_user.id},
    )

    await msg.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
    await state.clear()

# ‚îÄ‚îÄ –ú–∞–Ω—É–∞–ª—ã
@dp.message(lambda m: m.text == "–ú–∞–Ω—É–∞–ª—ã")
async def manuals(msg: types.Message):
    kb = InlineKeyboardBuilder()
    for title, link in [
        ("–ß–µ–º –∑–∞–Ω–∏–º–∞–µ–º—Å—è", WHAT_WE_DO_LINK),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Electrum", ELECTRUM_SETUP_LINK),
        ("–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", CANCEL_TX_LINK),
        ("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞", MANAGER_GUIDE_LINK),
    ]:
        kb.row(types.InlineKeyboardButton(text=title, url=link))
    await msg.answer("üìö –ú–∞–Ω—É–∞–ª—ã:", reply_markup=kb.as_markup())

# ‚îÄ‚îÄ –ö–æ—à–µ–ª—å–∫–∏
@dp.callback_query(lambda c: c.data == "generate_wallets")
async def wallets_generate(cb: types.CallbackQuery):
    user = get_user(cb.from_user.id)
    now  = time.time()

    if user["last_generation"] and now - user["last_generation"] < 24 * 3600:
        remain = 24 * 3600 - (now - user["last_generation"])
        h, m = divmod(int(remain // 60), 60)
        await cb.message.answer(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ {h}—á {m}–º.")
        await cb.answer()
        return

    user["wallets"] = generate_wallets()
    user["last_generation"] = now

    txt = "üéâ <b>–ù–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
    for i, w in enumerate(user["wallets"], 1):
        txt += (
            f"<b>#{i}</b>\n"
            f"‚Ä¢ ERC20: <code>{w['eth']}</code>\n"
            f"‚Ä¢ TRC20: <code>{w['trx']}</code>\n\n"
        )
    await cb.message.answer(txt)
    await cb.answer()

@dp.message(lambda m: m.text == "üß¨ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏")
async def wallets_show(msg: types.Message):
    user = get_user(msg.from_user.id)
    if not user["wallets"]:
        kb = InlineKeyboardBuilder()
        kb.add(types.InlineKeyboardButton(text="üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏", callback_data="generate_wallets"))
        await msg.answer("–ö–æ—à–µ–ª—å–∫–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.", reply_markup=kb.as_markup())
        return

    txt = "üîë <b>–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏</b>\n\n"
    for i, w in enumerate(user["wallets"], 1):
        txt += (
            f"<b>#{i}</b> (–æ—Ç {w['created']})\n"
            f"‚Ä¢ ETH: <code>{w['eth']}</code>\n"
            f"‚Ä¢ TRX: <code>{w['trx']}</code>\n\n"
        )
    await msg.answer(txt)

# ‚îÄ‚îÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(lambda m: m.text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def my_stats(msg: types.Message):
    user = get_user(msg.from_user.id)
    cur, nxt, need = next_rank(user["total_profit"])
    await msg.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üíµ –í—Å–µ–≥–æ: <b>{user['total_profit']}$</b>\n"
        f"üìÖ –ù–µ–¥–µ–ª—è: <b>{user['weekly_profit']}$</b>\n"
        f"üèÖ –†–∞–Ω–≥: <b>{cur}</b>\n"
        f"‚û°Ô∏è –î–æ <b>{nxt}</b>: <b>{need}$</b>"
    )

# ‚îÄ‚îÄ –¢–û–ü—ã
@dp.message(lambda m: m.text == "üîù –ö–æ–º–∞–Ω–¥—ã")
async def top_teams(msg: types.Message):
    txt = "üèÜ <b>–¢–æ–ø –∫–æ–º–∞–Ω–¥ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    for i, t in enumerate(weekly_top["teams"], 1):
        txt += f"{i}. <b>{t['name']}</b> ‚Äî {t['amount']}$ | –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {t['profits']}\n"
    await msg.answer(txt)

@dp.message(lambda m: m.text == "üîù –¢–æ–ø –Ω–µ–¥–µ–ª–∏")
async def top_workers(msg: types.Message):
    txt = "üèÜ <b>–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏</b>\n\n"
    for i, w in enumerate(weekly_top["workers"], 1):
        txt += f"{i}. <b>{w['name']}</b> ‚Äî {w['amount']}$ | –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {w['profits']}\n"
    txt += f"\nüí∏ <b>–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç:</b> {PAYMENTS_CHANNEL_LINK}"
    await msg.answer(txt)

# ‚îÄ‚îÄ –ö–∞–Ω–∞–ª—ã
@dp.message(lambda m: m.text == "üíå –ö–∞–Ω–∞–ª")
async def channels(msg: types.Message):
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="üì¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", url=MAIN_CHANNEL_LINK),
        types.InlineKeyboardButton(text="üí∏ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç", url=PAYMENTS_CHANNEL_LINK),
    )
    await msg.answer("–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=kb.as_markup())

# ‚îÄ‚îÄ –ò–Ω–≤–∞–π—Ç
@dp.message(lambda m: m.text == "ü§ù –ò–Ω–≤–∞–π—Ç")
async def invite(msg: types.Message):
    bot_username = (await bot.get_me()).username
    ref_code = msg.from_user.username or str(msg.from_user.id)
    link = f"https://t.me/{bot_username}?start={ref_code}"

    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(
        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
        url=f"tg://msg_url?url={link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–Ω–∞–º!",
    ))
    await msg.answer(
        "üíå –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π +5 % –∫ –Ω–µ–¥–µ–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç–µ!\n\n"
        f"<code>{link}</code>",
        reply_markup=kb.as_markup(),
    )

# ‚îÄ‚îÄ –í—ã–ø–ª–∞—Ç—ã / TopWeek –∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda m: m.text == "üè¶ –í—ã–ø–ª–∞—Ç—ã")
async def payments_info(msg: types.Message):
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="üí∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç", url=PAYMENTS_CHANNEL_LINK))
    await msg.answer(
        "üí∞ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤—ã–ø–ª–∞—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ:",
        reply_markup=kb.as_markup(),
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SCHEDULER JOBS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
scheduler.add_job(update_weekly_lists, CronTrigger(day_of_week="mon", hour=0, minute=0))
update_weekly_lists()   # –ø–µ—Ä–≤–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    logger.info("Starting bot‚Ä¶")
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
